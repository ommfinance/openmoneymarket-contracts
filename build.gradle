import groovy.swing.SwingBuilder

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'foundation.icon:gradle-javaee-plugin:0.8.0'
//        classpath files('.deployment/')
    }
}


apply plugin: 'deploy-contracts'

deployOMMContracts {
    envs {
        local {
            env = "local"
            configFile = "staking-sicx.json"
            keystore = 'godWallet.json'
            password = 'gochain'
            outputFile = "temp.json"
        }
        berlin {
            env = "berlin"
            configFile = "contracts-sample.json"
            keystore = rootProject.findProperty('keystoreName') ?: ''
            password = rootProject.findProperty('keystorePass') ?: ''
        }
    }
}

executeOMMActions {
    contractAddressFile = "addresses-BERLIN-1649835786824.json"
    propertiesFile = 'sample.properties'
    actionsFile = 'actions-sample.json'
    keystore = rootProject.findProperty('keystoreName') ?: ''
    password = rootProject.findProperty('keystorePass') ?: ''
}

def scoreIntegrationTest = new HashMap<String, String>()

subprojects {
    repositories {
        mavenCentral()
        flatDir {
            dirs "$rootProject.projectDir/libs/jars"
        }
    }


    apply plugin: 'foundation.icon.javaee'

    sourceSets {
        intTest {
            compileClasspath += sourceSets.main.output
            runtimeClasspath += sourceSets.main.output
            java {
            }
        }

    }

    configurations {
        intTestImplementation.extendsFrom testImplementation
        intTestAnnotationProcessor.extendsFrom testAnnotationProcessor
        intTestRuntimeOnly.extendsFrom testRuntimeOnly
    }


    ext {
        env = has("network") ? getProperty("network") : 'dev'
        javaeeVersion = findProperty("javaee.version") ?: '0.9.0'
        scorexVersion = findProperty("scorex.version") ?: '0.5.2'
        javaeeUnittestVersion = findProperty("javaee-unittest.version") ?: '0.9.2'
        scoreClientVersion = findProperty("score-client.version") ?: '0.9.0'
        iconsdkVersion = findProperty("iconsdk.version") ?: '2.0.0'
        jacksonVersion = findProperty("jackson.version") ?: '2.9.6'
        mockitoVersion = findProperty("mockito.version") ?: '4.3.1'
        junitVersion = findProperty("junit.version") ?: '5.8.1'
        javafakerVersion = findProperty("javafaker.version") ?: '1.0.2'
        commonIOVersion = findProperty("common-io.version") ?: '2.11.0'
    }

    dependencies {
        compileOnly "foundation.icon:javaee-api:$javaeeVersion"
        implementation "foundation.icon:javaee-scorex:$scorexVersion"
        implementation "com.github.sink772:minimal-json:0.9.6"
//        compileOnly "foundation.icon:javaee-score-client:$scoreClientVersion"
        compileOnly name: "score-client-$scoreClientVersion"
        annotationProcessor "foundation.icon:javaee-score-client:$scoreClientVersion"
//        annotationProcessor name:"score-client-0.9.0"
        // Use JUnit Jupiter for testing.
//        testImplementation "foundation.icon:javaee-score-client:$scoreClientVersion"
        testImplementation name: "score-client-$scoreClientVersion"
        testAnnotationProcessor "foundation.icon:javaee-score-client:$scoreClientVersion"
//        testAnnotationProcessor name:"score-client-0.9.0"
        testImplementation "foundation.icon:javaee-unittest:$javaeeUnittestVersion"
        testImplementation "org.junit.jupiter:junit-jupiter:$junitVersion"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
        testImplementation "org.mockito:mockito-core:$mockitoVersion"
        testImplementation "foundation.icon:icon-sdk:$iconsdkVersion"
        testImplementation("com.fasterxml.jackson.core:jackson-databind:$jacksonVersion")
        testImplementation group: "org.json", name: "json", version: "20211205"


    }

    java {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }

    // need to add this option to retrieve formal parameter names
    compileJava {
        options.compilerArgs += ['-parameters']
    }


    def loadProperties = {
        def prefix = 'score-test.'
        def props = project.getProperties()
        def scoreTest = new HashMap<String, Object>()

        scoreTest.put('keystoreName', props.getOrDefault(prefix + 'keystoreName', "$rootDir/gochain-local/data/godWallet.json"))
        scoreTest.put('keystorePass', props.getOrDefault(prefix + 'keystorePass', "gochain"))
        scoreTest.put('url', props.getOrDefault(prefix + 'url', 'http://localhost:9082/api/v3'))
        scoreTest.put('nid', props.getOrDefault(prefix + 'nid', 3))

        ext['scoreTest'] = scoreTest
    }
    loadProperties()

    //dummy
    scoreIntegrationTest.put('sICX', "https://raw.githubusercontent.com/openmoneymarket/omm-scores/master/dummy/sicx.zip");
    scoreIntegrationTest.put('Staking', "https://raw.githubusercontent.com/openmoneymarket/omm-scores/master/dummy/staking.jar");
    scoreIntegrationTest.put('BandOracle', "https://raw.githubusercontent.com/openmoneymarket/omm-scores/master/dummy/proxy-band-oracle.zip");
    scoreIntegrationTest.put('StableCoin', "https://raw.githubusercontent.com/openmoneymarket/omm-scores/master/dummy/stable-coin.zip");
    scoreIntegrationTest.put('DEX', "https://raw.githubusercontent.com/openmoneymarket/omm-scores/master/dummy/dex.jar");


    afterEvaluate { project ->
        scoreIntegrationTest.put(project.name, project.getTasks().getByName("optimizedJar").outputJarName.toString())
    }


}

gradle.taskGraph.beforeTask { Task task ->
    if (task.name == 'integrationTest') {
        scoreIntegrationTest.each { key, val ->
            task.systemProperty key, val
        }
        task.systemProperty "DEBUG_ENABLED", false
        task.systemProperty "BLOCK_INTERVAL", 50
        task.systemProperty "DEFAULT_RESULT_RETRY_WAIT", 100
    }
}


gradle.taskGraph.whenReady { taskGraph ->
    def keystorePassword = rootProject.findProperty("keystorePass")
    if (keystorePassword != null && !keystorePassword.toString().isEmpty()) {
        return;
    }
    def moduleName = null;
    def hasDeployTask = taskGraph.getAllTasks().any { it ->
        def result = it.name == "deployToMainnet"
        moduleName = it.project;
        return result
    }


    if (hasDeployTask && moduleName != null) {
        def pass = ''
        if (System.console() == null) {
            new SwingBuilder().edt {
                dialog(modal: true,
                        title: 'Keystore password',
                        alwaysOnTop: true,
                        resizable: false,
                        locationRelativeTo: null,
                        pack: true,
                        show: true
                ) {
                    vbox {
                        hbox {
                            label(text: 'Please enter key passphrase: ')
                        }
                        hbox {
                            input = passwordField(columns: 20, id: 'password')
                        }
                        hbox {
                            button(defaultButton: true, text: 'OK', actionPerformed: {
                                pass = input.password;
                                dispose();
                            })
                        }
                    }
                }
            }
        } else {
            pass = System.console().readPassword("\nPlease enter key passphrase: ")
            pass = new String(pass)
        }

        if (pass.size() <= 0) {
            throw new InvalidUserDataException("You must enter a password to proceed.")
        }

        moduleName.extensions.findByName("deployJar").password = pass.toString()

    }
}
